@page "/"
@using global::EmployeeManagement.Portal.Layout
@using global::EmployeeManagement.Portal.Services
@layout MainLayout
@inject EmployeeService EmployeeService

<PageTitle>Home</PageTitle>

<PageTitle>Dashboard</PageTitle>

<h1 class="mb-4">Employee Dashboard</h1>

@if (isLoading)
{
    <p><em>Loading dashboard...</em></p>
}
else if (Employees == null || !Employees.Any())
{
    <p>No employees found.</p>
}
else
{
    <div class="row">
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-secondary">Total Employees</h5>
                    <h2 class="card-text text-primary">@Employees.Count</h2>
                </div>
            </div>
        </div>

        @foreach (var group in Employees.GroupBy(e => e.Position))
        {
            <div class="col-md-3 mb-3">
                <div class="card text-center shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@group.Key</h5>
                        <h2 class="card-text text-success">@group.Count()</h2>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Employee> Employees = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var paginationDto = new PaginationDTO
            {
                Page = 1,
                QuantityPerPage = 1000,
            };

            var (employees, _) = await EmployeeService.GetAll(paginationDto);
            Employees = employees;
        }
        finally
        {
            isLoading = false;
        }
    }
}