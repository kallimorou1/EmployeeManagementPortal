@page "/edit/{Id:int}"
@using System.ComponentModel.DataAnnotations;
@using global::EmployeeManagement.Shared.Models
@inject EmployeeManagementPortal.Services.EmployeeService EmployeeService
@inject NavigationManager Navigation
@inject HttpClient Http


<h3>Edit Employee</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="@messageClass">@message</div>
}
@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="employee.Name" />
        </div>
        <div>
            <label for="position">Position:</label>
            <InputText id="position" @bind-Value="employee.Position" />
        </div>
        <div>
            <label for="department">Department:</label>
            <InputText id="department" @bind-Value="employee.Department" />
        </div>
        <div>
            <label for="salary">Salary:</label>
            <InputNumber id="salary" @bind-Value="employee.Salary" />
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </EditForm>

    <button @onclick="EmployeeManagement">Back to Employee List</button>  
}

@code {
    [Parameter]

    public int Id { get; set; }

    private Employee? employee = null;

    private string? message = null;
    private string messageClass = "";

    protected override async Task OnInitializedAsync()
    {
        employee = await Http.GetFromJsonAsync<Employee>($"https://localhost:7109/api/Employee/GetById?id={Id}");
    }

    public async Task HandleValidSubmit()
    {
        try{

            var response = await Http.PutAsJsonAsync("https://localhost:7109/api/Employee/Update", employee);

            if (response.IsSuccessStatusCode)
            {
                message = "Employee updated successfully!";
                messageClass = "alert alert-success";
                StateHasChanged();
                await Task.Delay(2500);
                Navigation.NavigateTo("/EmployeeManagement");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Failed to update employee: {error}";
                messageClass = "alert alert-danger";
                Console.WriteLine($"API Error: {response.StatusCode} - {error}");
            }
        } 
        catch (HttpRequestException)
        {
            message = "Network error. Please check your connection.";
            messageClass = "alert alert-danger";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
     
        }
}  
    private void EmployeeManagement()
    {
        Navigation.NavigateTo("/EmployeeManagement");
    }

} 

