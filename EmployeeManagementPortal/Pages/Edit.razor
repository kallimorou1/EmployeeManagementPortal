@page "/edit/{Id:int}"
@using System.ComponentModel.DataAnnotations;
@using global::EmployeeManagement.Portal.Services
@using global::EmployeeManagement.Shared.Models
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject EmployeeService EmployeeService


<h3>Edit Employee</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="@messageClass">@message</div>
}
@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="employee.Name" />
        </div>
        <div>
            <label for="position">Position:</label>
            <InputText id="position" @bind-Value="employee.Position" />
        </div>
        <div>
            <label for="department">Department:</label>
            <InputText id="department" @bind-Value="employee.Department" />
        </div>
        <div>
            <label for="salary">Salary:</label>
            <InputNumber id="salary" @bind-Value="employee.Salary" />
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </EditForm>

    <button class="btn btn-info" @onclick="EmployeeManagement">Back to Employee List</button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Employee? employee = null;

    private string? message = null;
    private string messageClass = "";

    // Create HttpClient using factory
    private HttpClient client => HttpClientFactory.CreateClient("EmployeeManagement.API");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("EmployeeManagement.API");
            employee = await client.GetFromJsonAsync<Employee>($"api/Employee/GetById?id={Id}");
        }
        catch (Exception ex)
        {
            message = $"Failed to load employee: {ex.Message}";
            messageClass = "alert alert-danger";
        }
    }

    public async Task HandleValidSubmit()
    {
        try
        {
            var response = await EmployeeService.UpdateEmployee(employee);

            if (response)
            {
                message = "Employee updated successfully!";
                messageClass = "alert alert-success";
                StateHasChanged();
                await Task.Delay(2500);
                Navigation.NavigateTo("/EmployeeManagement");
            }
            else
            {
                message = "Failed to update employee";
                messageClass = "alert alert-danger";
               
            }
        }
        catch (HttpRequestException)
        {
            message = "Network error. Please check your connection.";
            messageClass = "alert alert-danger";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }


    private void EmployeeManagement()
    {
        Navigation.NavigateTo("/EmployeeManagement");
    }
}

