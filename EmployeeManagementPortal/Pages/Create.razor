@page "/create"
@using global::EmployeeManagement.Portal.Services
@using global::EmployeeManagement.Shared.Models
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject EmployeeService EmployeeService


<h3>Create a new employee</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="@messageClass">@message</div>
}
@if (employee == null)
{
<p><em>Loading...</em></p>
}
else
{
<EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="employee.Name" />
    </div>
    <div>
        <label for="position">Position:</label>
        <InputText id="position" @bind-Value="employee.Position" />
    </div>
    <div>
        <label for="department">Department:</label>
        <InputText id="department" @bind-Value="employee.Department" />
    </div>
    <div>
        <label for="salary">Salary:</label>
        <InputNumber id="salary" @bind-Value="employee.Salary" />
            <button type="submit" class="btn btn-success">Save</button>
    </div>
</EditForm>

    <button class="btn btn-info" @onclick="EmployeeManagement">Back to Employee List</button>

}
@code {

    [Parameter]

    public int Id { get; set; }

    private Employee? employee = null;

    private string? message = null;
    private string messageClass = "";

    protected override void OnInitialized()
    {
        employee = new Employee
        {
            Name = "",
            Position = "",
            Department = ""
        };
    }

    public async Task HandleValidSubmit()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("EmployeeManagement.API");

            var response = await EmployeeService.Add(employee);

            if (response)
            {
                message = "Employee created successfully!";
                messageClass = "alert alert-success"; 
                StateHasChanged();
                await Task.Delay(2500);
                Navigation.NavigateTo("/EmployeeManagement");
            }
            else
            {
                message = "Failed to add employee";
                messageClass = "alert alert-danger";

            }
        }
        catch (HttpRequestException)
        {
            message = "Network error. Please check your connection.";
            messageClass = "alert alert-danger";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");

        }
    }

    private void EmployeeManagement()
    {
        Navigation.NavigateTo("/EmployeeManagement");
    }
}


