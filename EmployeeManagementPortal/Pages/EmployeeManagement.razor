@inject NavigationManager NavigationManager
@page "/EmployeeManagement"
@using global::EmployeeManagement.Portal.Services

@inject IEmployeeService EmployeeService
@using System.IO





<PageTitle>Employee Management</PageTitle>

<h1>Employee Management</h1>


@if (!string.IsNullOrEmpty(message))
{
    <div class="@messageClass">@message</div>
}

<div class="form-inline mb-2">
    <input type="text" class="form-control mr-2"
           @bind="searchTerm"
           placeholder="Search by name, department, or position" />
</div>

<div class="form-inline mb-2">
    <label for="sortColumn" class="mr-2">Sort by:</label>
    <select id="sortColumn" class="form-control mr-2" @bind="SortColumn" @bind:event="onchange">
        <option value="Name">Name</option>
        <option value="Position">Position</option>
        <option value="Department">Department</option>
        <option value="Salary">Salary</option>
    </select>
    <select id="sortOrder" class="form-control mr-2" @bind="SortOrder" @bind:event="onchange">
        <option value="asc">Ascending</option>
        <option value="desc">Descending</option>
    </select>
</div>


<button type="button" class="btn btn-dark" @onclick="ApplyFilter">Apply</button>
<button type="button" class="btn btn-dark" @onclick="ClearFilter">Clear</button>


@if (Employees != null && Employees.Any())
{
    <Pagination TotalPagesQuantity="@TotalPagesQuantity"
                currentPage="@currentPage"
                Radius="2"
                SelectedPage="SelectedPage">
    </Pagination>
}

@if (Employees == null || Employees.Count == 0)

{

    <p><em> No employees found </em></p>

}

else

{


    <table class="table bg-white shadow-sm">
        <thead class="table-dark">
            <tr>
                <th> ID </th>
                <th> Name </th>
                <th>Position </th>
                <th> Department </th>
                <th>Salary </th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Name</td>
                    <td>@employee.Position</td>
                    <td>@employee.Department</td>
                    <td>@employee.Salary</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateEmployee(employee.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteModal(employee.Id)">Delete</button>

                    </td>
                </tr>

            }

        </tbody>
    </table>



    <!-- Delete Confirmation Modal -->
    @if (isModalVisible)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="close" @onclick="HideDeleteModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this employee?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-warning" @onclick="HideDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteEmployee">Delete</button>
                    </div>
                </div>
            </div>
        </div>

    }
}

<button class="btn btn-light" @onclick="CreateEmployee">Create</button>

@code {


    // List to hold employee data
    private int currentPage = 1;
    private int TotalPagesQuantity = 1;
    private List<Employee> Employees = new();
    private string searchTerm = string.Empty;
    private string? message = null;
    private string messageClass = "";
    private string SortOrder = "asc";
    private string? SortColumn = "Id";

    // State for modal and employee ID to be deleted
    private bool isModalVisible = false;
    private int employeeIdToDelete = 0;

    public PaginationDTO paginationDto { get; set; }

    private async Task ApplyFilter()
    {
        currentPage = 1; //  Reset to first page after applying
        paginationDto.Page = 1;
        paginationDto.SearchTerm = searchTerm;
        await LoadEmployees(currentPage);
    }

    private async Task ClearFilter()
    {
        searchTerm = string.Empty;
        paginationDto.SearchTerm = null;
        SortColumn = "Id";
        SortOrder = "asc";
        paginationDto.SortColumn = SortColumn;
        paginationDto.SortOrder = Shared.Models.SortOrder.Ascending;

        currentPage = 1; // Reset to first page after clearing
        paginationDto.Page = 1;
        await LoadEmployees(currentPage);
    }


    protected override async Task OnInitializedAsync()
    {

        paginationDto = new PaginationDTO
        {
            Page = currentPage,
            QuantityPerPage = 10,
            SearchTerm = searchTerm,
            SortColumn = SortColumn ?? "Id",
            SortOrder = SortOrder?.Equals("asc", StringComparison.OrdinalIgnoreCase) == true
            ? Shared.Models.SortOrder.Ascending
            : Shared.Models.SortOrder.Descending
        };
        await LoadEmployees(currentPage);

    }
   

    private async Task LoadEmployees(int page)
    {

        paginationDto.Page = page;
        paginationDto.SortColumn = SortColumn ?? "Id";
        paginationDto.SortOrder = SortOrder.Equals("asc", StringComparison.OrdinalIgnoreCase)
            ? Shared.Models.SortOrder.Ascending
            : Shared.Models.SortOrder.Descending;

        var (employees, totalPages) = await EmployeeService.GetAll(paginationDto);
        Employees = employees;
        TotalPagesQuantity = totalPages;
        currentPage = page;

        //refresh page
        StateHasChanged();
    }


    private async Task SelectedPage(int page)
    {
        paginationDto.Page = page;
        await LoadEmployees(page);
    }

    #region Delete Button
    // Method to delete an employee by ID
    async Task DeleteEmployee(int id)
    {

        try
        {

            var response = await EmployeeService.DeleteById(id);


            if (response)
            {
                // Refresh the list to 1st page after deletion
                currentPage = 1;
                message = "Employee deleted successfully!";
                messageClass = "alert alert-success";
                StateHasChanged();
                await Task.Delay(2000);
                await OnInitializedAsync();

            }
            else
            {
                message = "Error deleting employee";
                messageClass = "alert alert-danger";
            }
        }
        catch (HttpRequestException)
        {
            message = "Network error. Unable to connect to the server.";
            messageClass = "alert alert-danger";
        }
        catch (Exception ex)
        {
            message = $"Unexpected error: {ex.Message}";
            messageClass = "alert alert-danger";
        }


    }

    #endregion

    #region Naviation
    void UpdateEmployee(int id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }

    void CreateEmployee()
    {
        NavigationManager.NavigateTo("/create");
    }
    #endregion


    #region Modal Filter
    // Show the delete confirmation modal
    private void ShowDeleteModal(int id)
    {
        employeeIdToDelete = id;  // Store the ID of the employee to delete
        isModalVisible = true; // Show the modal
    }

    // Hide the delete confirmation modal
    private void HideDeleteModal()
    {
        isModalVisible = false;  // Hide the modal
    }

    // Confirm delete and call DeleteEmployee
    private async Task ConfirmDeleteEmployee()
    {
        await DeleteEmployee(employeeIdToDelete);  // Delete the employee
        HideDeleteModal();  // Close the modal after deletion
    }
    #endregion
}
