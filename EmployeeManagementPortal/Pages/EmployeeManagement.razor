@inject NavigationManager NavigationManager
@page "/EmployeeManagement"
@using global::EmployeeManagement.Portal.Services
@inject IHttpClientFactory HttpClientFactory
@inject EmployeeService EmployeeService



<PageTitle>Employee Management</PageTitle>

<h1>Employee Management</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (!string.IsNullOrEmpty(message))
{
    <div class="@messageClass">@message</div>
}

<Pagination TotalPagesQuantity="TotalPageQuantity" currentPage="currentPage" Radius="2"
            SelectedPage="SelectedPage"> </Pagination>

@if (Employees == null || Employees.Count == 0)

{

    <p><em> Loading...</em></p>

}

else

{

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Department</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Name</td>
                    <td>@employee.Position</td>
                    <td>@employee.Department</td>
                    <td>@employee.Salary</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => UpdateEmployee(employee.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteModal(employee.Id)">Delete</button>

                    </td>
                </tr>
                
            }

        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="CreateEmployee">Create</button>


    <!-- Delete Confirmation Modal -->
    @if (isModalVisible)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close" @onclick="HideDeleteModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this employee?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteEmployee">Delete</button>
                </div>
            </div>
        </div>
    </div>

}

    @code {


    // List to hold employee data
    private List<Employee> Employees = new();
    private int currentPage = 1;
    private int TotalPageQuantity;



    private string? message = null;
    private string messageClass = "";

    // State for modal and employee ID to be deleted
    private bool isModalVisible = false;
    private int employeeIdToDelete = 0;
    
    protected override async Task OnInitializedAsync()
    {

       
        try
        {
            
            var employees = await EmployeeService.GetAll();
            Employees = employees ?? new List<Employee>();

            message = null;
            messageClass = "";
        }
        catch (HttpRequestException)
        {
            message = "Network error. Unable to fetch employees.";
            messageClass = "alert alert-danger";
        }
        catch (Exception ex)
        {
            message = $"Unexpected error: {ex.Message}";
            messageClass = "alert alert-danger";
        }
    }

    

    // Method to delete an employee by ID
    async Task DeleteEmployee(int id)
    {

        try{

            var response = await EmployeeService.DeleteById(id);
          

            if (response)
            {
                await OnInitializedAsync(); // Refresh the list after deletion
                message = "Employee deleted successfully!";
                messageClass = "alert alert-success";

            }
            else
            {
                message = "Error deleting employee";
                messageClass = "alert alert-danger";
            }
        }
        catch (HttpRequestException)
        {
            message = "Network error. Unable to connect to the server.";
            messageClass = "alert alert-danger";
        }
        catch (Exception ex)
        {
            message = $"Unexpected error: {ex.Message}";
            messageClass = "alert alert-danger";
        }

        StateHasChanged();
    }
    void UpdateEmployee(int id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }

    void CreateEmployee()
    {
        NavigationManager.NavigateTo("/create");
    }

    // Show the delete confirmation modal
    private void ShowDeleteModal(int id)
    {
        employeeIdToDelete = id;  // Store the ID of the employee to delete
        isModalVisible = true; // Show the modal
    }

    // Hide the delete confirmation modal
    private void HideDeleteModal()
    {
        isModalVisible = false;  // Hide the modal
    }

    // Confirm delete and call DeleteEmployee
    private async Task ConfirmDeleteEmployee()
    {
        await DeleteEmployee(employeeIdToDelete);  // Delete the employee
        HideDeleteModal();  // Close the modal after deletion
    }
   
}
}