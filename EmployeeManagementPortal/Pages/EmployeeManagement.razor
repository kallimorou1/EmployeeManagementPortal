@using EmployeeManagementPortal.Models;
@inject NavigationManager NavigationManager
@page "/EmployeeManagement"

<PageTitle>Employee Management</PageTitle>

<h1>Employee Management</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (Employees == null || Employees.Count == 0)

{

    <p><em> Loading...</em></p>

}

else

{

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Department</th>
                <th>Salary</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Name</td>
                    <td>@employee.Position</td>
                    <td>@employee.Department</td>
                    <td>@employee.Salary</td>
                    <td>
                        <button @onclick="() => EditEmployee(employee.Id)">Edit</button>
                        <button @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </td>
                </tr>
                
            }

        </tbody>
    </table>
  
    <button @onclick="CreateEmployee">Create</button>

}


@code {

    // List to hold employee data
    private List<Employee> Employees = new();

    protected override async Task OnInitializedAsync()
    {
        var apiUrl = "https://localhost:7109/api/Employee/GetAll";
        using var httpClient = new HttpClient();

        var result = await httpClient.GetFromJsonAsync<List<Employee>>(apiUrl);
        Employees = result ?? new List<Employee>();
    }

    // Method to delete an employee by ID
    async Task DeleteEmployee(int id)
    {
        var apiUrl = $"https://localhost:7109/api/Employee/DeleteById?id={id}";
        using var httpClient = new HttpClient();

        var response = await httpClient.DeleteAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync(); // Refresh the list after deletion
            StateHasChanged();

        }
        else
        {
            
        }
    }

    void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }

    void CreateEmployee()
    {
        NavigationManager.NavigateTo("/create");
    }

   
}
