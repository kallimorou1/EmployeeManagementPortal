<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            if (link.Active)
            {
                <li class="page-item active" aria-current="page">
                    <span class="page-link">@link.Text</span>
                </li>
            }
            else if (link.Enabled)
            {
                <li class="page-item">
                    <a class="page-link" href="#" @onclick="() => SelectedPageInternal(link)" @onclick:preventDefault="true">@link.Text</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">@link.Text</span>
                </li>
            }
        }
    </ul>
</nav>

@code {
    [Parameter] public int currentPage { get; set; } = 1;
    [Parameter] public int TotalPagesQuantity { get; set; } = 1;
    [Parameter] public int Radius { get; set; } = 2;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    private List<LinkModel> links = new();

    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == currentPage || !link.Enabled)
            return;

        // ✅ Don’t rely on this value internally — parent owns it.
        await SelectedPage.InvokeAsync(link.Page);
    }

    private void LoadPages()
    {
        links.Clear();

        // Previous
        bool isPreviousEnabled = currentPage > 1;
        links.Add(new LinkModel(currentPage - 1, isPreviousEnabled, "Previous"));

        // Numbered pages
        for (int i = 1; i <= TotalPagesQuantity; i++)
        {
            if (i >= currentPage - Radius && i <= currentPage + Radius)
            {
                links.Add(new LinkModel(i)
                {
                    Active = currentPage == i
                });
            }
        }

        // Next
        bool isNextEnabled = currentPage < TotalPagesQuantity;
        links.Add(new LinkModel(currentPage + 1, isNextEnabled, "Next"));

        StateHasChanged(); 
    }

    private class LinkModel
    {
        public LinkModel(int page) : this(page, true) { }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString()) { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}
