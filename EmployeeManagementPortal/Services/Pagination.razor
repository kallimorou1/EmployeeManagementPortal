<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            if (link.Active)
            {
                <li class="page-item active" aria-current="page">
                    <span class="page-link">@link.Text</span>
                </li>
            }
            else if (link.Enabled)
            {
                <li class="page-item">
                    <a class="page-link" href="#" @onclick="() => SelectedPageInternal(link)">@link.Text</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">@link.Text</span>
                </li>
            }
        }
    </ul>
    </nav>


@code {
    [Parameter] public int currentPage { get; set; } = 1;
    [Parameter] public int TotalPagesQuantity { get; set; } = 1;
    [Parameter] public int Radius { get; set; } = 10;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> links;


    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == currentPage)
        {
            return;
        }
        if (!link.Enabled)
        {
            return;
        }
        
        currentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
        
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();
        var isPreviousageEnabled = currentPage != 1;
        var previousPage = currentPage - 1;
        links.Add(new LinkModel(previousPage, isPreviousageEnabled, "Previous"));

        for (int i = 1; i <= TotalPagesQuantity; i++)
        {
            if (i >= currentPage - Radius && i <= currentPage + Radius)
            {
                links.Add(new LinkModel(i)
                {
                    Active = currentPage == i
                });
            }
        }

        var isNextPageEnabled = currentPage != TotalPagesQuantity;
        var NextPage = currentPage + 1;
        links.Add(new LinkModel(NextPage, isNextPageEnabled, "Next"));


    }

    class LinkModel
    {
        public LinkModel(int page)
        : this(page, true) { }


        public LinkModel(int page, bool enabled)
       : this(page, enabled, page.ToString()) 
       { }

       public LinkModel(int page, bool enabled, string text)
        {
           Page = page;
           Enabled = enabled;
           Text = text;

        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}

